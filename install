#!/bin/bash
# Variables (Can be changed depends on your preferred values)
# Script name
MyScriptName='(｡◕‿◕｡)AidanVPN Premium Script'

function ip_address(){
  local IP="$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipv4.icanhazip.com )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipinfo.io/ip )"
  [ ! -z "${IP}" ] && echo "${IP}" || echo
} 
IPADDR="$(ip_address)"

# OpenSSH Ports
SSH_Port1='22'

# Your SSH Banner
SSH_Banner='https://notabug.org/irwan-aidan/vps/raw/master/banner'

# Dropbear Ports
Dropbear_Port1='440'
Dropbear_Port2='441'

# Stunnel Ports
Stunnel_Port1='443' # through Dropbear
Stunnel_Port2='444' # through OpenSSH
Stunnel_Port3='587' # through OpenVPN

# OpenVPN Ports
OpenVPN_TCP_Port='1720'
OpenVPN_UDP_Port='25222'

# Privoxy Ports
Privoxy_Port1='8086'

# Squid Ports
Squid_Port1='8000'

# OpenVPN Config Download Port
OvpnDownload_Port='85' # Before changing this value, please read this document. It contains all unsafe ports for Google Chrome Browser, please read from line #23 to line #89: https://chromium.googlesource.com/chromium/src.git/+/refs/heads/master/net/base/port_util.cc

# Server local time
MyVPS_Time='Asia/Kuala_Lumpur'
#############################


#############################
#############################
## All function used for this script
#############################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################
#############################

function InstUpdates(){
 export DEBIAN_FRONTEND=noninteractive
 apt-get update
 apt-get upgrade -y
 
 # Removing some firewall tools that may affect other services
 apt-get remove --purge ufw firewalld -y

 
 # Installing some important machine essentials
 apt-get install nano wget curl zip unzip tar gzip p7zip-full bc rc openssl cron net-tools dnsutils dos2unix screen bzip2 ccrypt -y
 
 # Now installing all our wanted services
 apt-get install gnupg tcpdump grepcidr dropbear stunnel4 privoxy ca-certificates nginx ruby apt-transport-https lsb-release squid -y

 # Installing all required packages to install Webmin
 apt-get install perl libnet-ssleay-perl openssl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python dbus libxml-parser-perl -y
 apt-get install shared-mime-info jq fail2ban -y

 
 # Installing a text colorizer
 gem install lolcat

 # Trying to remove obsolette packages after installation
 apt-get autoremove -y
 
 # Installing OpenVPN by pulling its repository inside sources.list file 
 rm -rf /etc/apt/sources.list.d/openvpn*
 echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" > /etc/apt/sources.list.d/openvpn.list
 wget -qO - http://build.openvpn.net/debian/openvpn/stable/pubkey.gpg|apt-key add -
 apt-get update
 apt-get install openvpn
}

function InstWebmin(){
 # Download the webmin .deb package
 # You may change its webmin version depends on the link you've loaded in this variable(.deb file only, do not load .zip or .tar.gz file):
 WebminFile='https://notabug.org/irwan-aidan/vps/raw/master/webmin_1.920_all.deb'
 wget -qO webmin.deb "$WebminFile"
 
 # Installing .deb package for webmin
 dpkg --install webmin.deb
 
 rm -rf webmin.deb
 
 # Configuring webmin server config to use only http instead of https
 sed -i 's|ssl=1|ssl=0|g' /etc/webmin/miniserv.conf
 
 # Then restart to take effect
 systemctl restart webmin
}

function InstSSH(){
 # Removing some duplicated sshd server configs
 rm -f /etc/ssh/sshd_config*
 
 # Creating a SSH server config using cat eof tricks
 cat <<'MySSHConfig' > /etc/ssh/sshd_config
# My OpenSSH Server config
Port myPORT1
AddressFamily inet
ListenAddress 0.0.0.0
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
PermitRootLogin yes
MaxSessions 1024
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
ClientAliveInterval 240
ClientAliveCountMax 2
UseDNS no
Banner /etc/banner
AcceptEnv LANG LC_*
Subsystem   sftp  /usr/lib/openssh/sftp-server
MySSHConfig

 # Now we'll put our ssh ports inside of sshd_config
 sed -i "s|myPORT1|$SSH_Port1|g" /etc/ssh/sshd_config

 # Download our SSH Banner
 rm -f /etc/banner
 wget -qO /etc/banner "$SSH_Banner"
 dos2unix -q /etc/banner

 # My workaround code to remove `BAD Password error` from passwd command, it will fix password-related error on their ssh accounts.
 sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password
 sed -i 's/use_authtok //g' /etc/pam.d/common-password

 # Some command to identify null shells when you tunnel through SSH or using Stunnel, it will fix user/pass authentication error on HTTP Injector, KPN Tunnel, eProxy, SVI, HTTP Proxy Injector etc ssh/ssl tunneling apps.
 sed -i '/\/bin\/false/d' /etc/shells
 sed -i '/\/usr\/sbin\/nologin/d' /etc/shells
 echo '/bin/false' >> /etc/shells
 echo '/usr/sbin/nologin' >> /etc/shells
 
 # Restarting openssh service
 systemctl restart ssh
 
 # Removing some duplicate config file
 rm -rf /etc/default/dropbear*
 
 # creating dropbear config using cat eof tricks
 cat <<'MyDropbear' > /etc/default/dropbear
# My Dropbear Config
NO_START=0
DROPBEAR_PORT=PORT01
DROPBEAR_EXTRA_ARGS="-p PORT02"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RSAKEY="/etc/dropbear/dropbear_rsa_host_key"
DROPBEAR_DSSKEY="/etc/dropbear/dropbear_dss_host_key"
DROPBEAR_ECDSAKEY="/etc/dropbear/dropbear_ecdsa_host_key"
DROPBEAR_RECEIVE_WINDOW=65536
MyDropbear

 # Now changing our desired dropbear ports
 sed -i "s|PORT01|$Dropbear_Port1|g" /etc/default/dropbear
 sed -i "s|PORT02|$Dropbear_Port2|g" /etc/default/dropbear
 
 # Restarting dropbear service
 systemctl restart dropbear
}

function InsStunnel(){
 StunnelDir=$(ls /etc/default | grep stunnel | head -n1)

 # Creating stunnel startup config using cat eof tricks
cat <<'MyStunnelD' > /etc/default/$StunnelDir
# My Stunnel Config
ENABLED=1
FILES="/etc/stunnel/*.conf"
OPTIONS=""
BANNER="/etc/banner"
PPP_RESTART=0
# RLIMITS="-n 4096 -d unlimited"
RLIMITS=""
MyStunnelD

# Removing all stunnel folder contents
 rm -rf /etc/stunnel/*
 
 # Creating stunnel certifcate using openssl
 openssl req -new -x509 -days 9999 -nodes -subj "/C=MY/ST=Selangor/L=Gombak/O=$MyScriptName/OU=$MyScriptName/CN=$MyScriptName" -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem &> /dev/null
##  > /dev/null 2>&1

 # Creating stunnel server config
 cat <<'MyStunnelC' > /etc/stunnel/stunnel.conf
# My Stunnel Config
pid = /var/run/stunnel.pid
cert = /etc/stunnel/stunnel.pem
client = no
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
TIMEOUTclose = 0

[dropbear]
accept = Stunnel_Port1
connect = 127.0.0.1:dropbear_port_c

[openssh]
accept = Stunnel_Port2
connect = 127.0.0.1:openssh_port_c

[openvpn]
accept = Stunnel_Port3
connect = 127.0.0.1:openvpn_port_c
MyStunnelC

 # setting stunnel ports
 sed -i "s|Stunnel_Port1|$Stunnel_Port1|g" /etc/stunnel/stunnel.conf
 sed -i "s|dropbear_port_c|$Dropbear_Port1|g" /etc/stunnel/stunnel.conf
 sed -i "s|Stunnel_Port2|$Stunnel_Port2|g" /etc/stunnel/stunnel.conf
 sed -i "s|openssh_port_c|$SSH_Port1|g" /etc/stunnel/stunnel.conf
 sed -i "s|openvpn_port_c|$OpenVPN_TCP_Port|g" /etc/stunnel/stunnel.conf
 sed -i "s|Stunnel_Port3|$Stunnel_Port3|g" /etc/stunnel/stunnel.conf
 
 # Restarting stunnel service
 systemctl restart $StunnelDir

}

function InsOpenVPN(){
 # Checking if openvpn folder is accidentally deleted or purged
 if [[ ! -e /etc/openvpn ]]; then
  mkdir -p /etc/openvpn
 fi

 # Removing all existing openvpn server files
 rm -rf /etc/openvpn/*

 # Creating server.conf, ca.crt, server.crt and server.key
 cat <<'myOpenVPNconf' > /etc/openvpn/server_tcp.conf
# OpenVPN TCP
port OVPNTCP
proto tcp
dev tun
ca /etc/openvpn/ca.crt
cert /etc/openvpn/server.crt
key /etc/openvpn/server.key
dh /etc/openvpn/dh2048.pem
verify-client-cert none
username-as-common-name
key-direction 0
plugin /etc/openvpn/plugins/openvpn-plugin-auth-pam.so login
server 10.200.0.0 255.255.0.0
ifconfig-pool-persist ipp.txt
push "route-method exe"
push "route-delay 2"
keepalive 10 120
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
sndbuf o
rcvbuf 0
tcp-nodelay
status openvpn-status.log
log tcp.log
verb 2
ncp-disable
cipher none
auth none
myOpenVPNconf

cat <<'myOpenVPNconf2' > /etc/openvpn/server_udp.conf
# OpenVPN UDP
port OVPNUDP
proto udp
dev tun
ca /etc/openvpn/ca.crt
cert /etc/openvpn/server.crt
key /etc/openvpn/server.key
dh /etc/openvpn/dh2048.pem
verify-client-cert none
username-as-common-name
key-direction 0
plugin /etc/openvpn/plugins/openvpn-plugin-auth-pam.so login
server 10.201.0.0 255.255.0.0
ifconfig-pool-persist ipp.txt
push "route-method exe"
push "route-delay 2"
keepalive 10 120
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
log udp.log
verb 2
ncp-disable
cipher none
auth none
myOpenVPNconf2

  cat <<'EOF7'> /etc/openvpn/ca.crt
-----BEGIN CERTIFICATE-----
MIIDTjCCAjagAwIBAgIUNUBTsv/x/vVLG5L1FYeYxcshebUwDQYJKoZIhvcNAQEL
BQAwFzEVMBMGA1UEAwwMdnBuLmFpZGFuLm15MB4XDTIyMDUyNzE0NTA1OVoXDTMy
MDUyNDE0NTA1OVowFzEVMBMGA1UEAwwMdnBuLmFpZGFuLm15MIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyRLG/yDxMnlHhOjw/XD/sNY4lINjz2j6bXbT
6lDtTavwHwiH/SVy+WUW1Nx4MWTX1GSaIjaS+AzfltyQ0vyFMeURrRHTc8lNnZ6O
bqG8X1FcAiXpxA6uWDELHK4q+tSYXBzTTTCVBLej6d1/bJeeyo0jTvKBscIjJzi7
f1JNR1jPLhSJMiDmdCjQprkCMoPaSbD7b+Yzws6nmFnPHgRxYkjJCOxYghVUNF6/
P7N9UO0KzElTRqoHm8137Rjfvlfv093ZnNHk6TAyUD9qUDK02ZhysrLyLIzqjafS
Y+gA0KeqpcaJRW5rbk9xSMVUze8ZCX7If4ZZCTfQ5ShNB0im+QIDAQABo4GRMIGO
MB0GA1UdDgQWBBSJR9adtEJ3HvnHfDzwS+UHveKbqDBSBgNVHSMESzBJgBSJR9ad
tEJ3HvnHfDzwS+UHveKbqKEbpBkwFzEVMBMGA1UEAwwMdnBuLmFpZGFuLm15ghQ1
QFOy//H+9UsbkvUVh5jFyyF5tTAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBBjAN
BgkqhkiG9w0BAQsFAAOCAQEAgTq+Wx0UKEnKwJqOvQOaWjp7oFL9hthdnoc/rYoz
oPna9HbCwke7qBLTHZZiPPLmk36yNrDrlTmDeghj4ZThr7JrmzMf3Q8Tg0gfkZfs
fnQjjHnphtC1gyQALB6NcolPMCR3+iQTb/xQLKyPOfBYLUdW2yyNM/SJ6dqElNes
c2qJjuxo2PXa618Dyc7akrtmZBhA5WEVQOPXMNDmNBcp+AH5xp+K0gP6mIQK3JI7
CdLDny11eD4j88MU6YIdsWTGaHumfbn79bAHP4mGrPShu++p69NnoBYQkFEFpQZd
rcUFfRgq3n+O3FgXtBj5N49QJfEvZCaNR9IVjjtMGNJ/aQ==
-----END CERTIFICATE-----
EOF7
 cat <<'EOF9'> /etc/openvpn/server.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            1d:91:5b:c0:b8:d8:37:9a:08:e5:c1:97:7a:44:d0:c4
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: CN=vpn.aidan.my
        Validity
            Not Before: May 27 15:13:38 2022 GMT
            Not After : Aug 29 15:13:38 2024 GMT
        Subject: CN=server
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:cc:e2:d8:49:b3:35:cd:f1:2e:76:28:39:af:6f:
                    fb:e6:52:8d:0b:7d:4e:94:4e:98:ab:02:a9:5c:f2:
                    22:41:99:9b:05:65:68:71:f5:ed:a4:c5:3d:02:a7:
                    a8:4f:bc:fc:99:73:e8:8b:b4:87:0b:03:5f:20:79:
                    32:ec:37:2b:cc:ba:ea:7d:61:c4:a0:87:f0:66:96:
                    c1:1a:31:eb:b7:bc:82:f0:04:42:aa:5f:7f:c7:39:
                    b2:09:95:99:d7:bd:aa:8c:8f:16:81:26:61:0c:2d:
                    cc:65:0b:f7:be:96:9e:44:07:40:bd:15:52:9f:a4:
                    5c:1b:b2:00:45:17:8f:22:96:24:3a:90:91:6e:fc:
                    e2:cd:df:64:1d:72:18:25:81:4c:cd:3b:e9:b9:17:
                    6d:45:a1:4c:f7:93:a9:a3:01:18:2f:c1:94:0c:5f:
                    2b:a7:c1:4b:c1:9d:98:71:52:0f:2d:9d:1f:de:cd:
                    ed:44:e1:23:25:c5:44:d7:a9:63:59:ee:c0:3e:80:
                    49:3c:da:b6:e5:7f:5b:d6:22:8d:e1:28:d5:dd:8e:
                    07:b2:40:54:6c:58:2b:71:f5:73:6c:0b:df:24:94:
                    db:48:78:84:3f:aa:9a:03:8c:f6:f6:cf:5e:81:6e:
                    ab:8d:7e:a0:84:37:23:a9:55:b8:98:4d:02:83:88:
                    a8:e3
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            X509v3 Subject Key Identifier: 
                9C:A2:90:31:DB:2E:96:84:45:0E:D0:61:F0:15:5F:DB:4C:31:0B:C0
            X509v3 Authority Key Identifier: 
                keyid:89:47:D6:9D:B4:42:77:1E:F9:C7:7C:3C:F0:4B:E5:07:BD:E2:9B:A8
                DirName:/CN=vpn.aidan.my
                serial:35:40:53:B2:FF:F1:FE:F5:4B:1B:92:F5:15:87:98:C5:CB:21:79:B5

            X509v3 Extended Key Usage: 
                TLS Web Server Authentication
            X509v3 Key Usage: 
                Digital Signature, Key Encipherment
            X509v3 Subject Alternative Name: 
                DNS:server
    Signature Algorithm: sha256WithRSAEncryption
         19:26:36:da:4b:86:9b:43:e6:b0:c6:16:43:cf:b1:52:b3:04:
         5d:98:62:5a:70:de:8a:97:9a:25:dd:6c:ad:34:c4:52:f6:4c:
         5c:b1:3c:25:e4:9d:ef:39:3d:05:a3:64:ba:dc:3f:e0:70:74:
         f8:4c:c6:27:34:bf:21:f0:f8:da:d6:4d:5c:88:18:f3:92:31:
         0b:21:94:34:e6:ea:b9:86:f6:32:e7:a5:e9:df:d1:f3:53:c6:
         7b:46:3c:9f:1a:e8:8d:36:e8:0d:8a:49:80:ef:95:bb:7e:9b:
         ca:67:5a:ca:27:7a:00:9e:cb:b9:d8:57:f7:e1:02:cb:dc:f7:
         db:be:a6:d4:ec:68:15:bd:83:6f:58:fb:38:c8:3d:be:0b:f2:
         6a:94:69:fa:4c:23:2d:d2:84:b1:d9:3c:8a:d4:30:65:e0:80:
         73:b9:31:b2:55:8d:f8:8a:47:62:fc:e4:a9:39:65:5b:86:e5:
         37:12:28:10:6d:05:f6:39:c8:49:8c:83:d8:c3:cd:a4:b5:80:
         97:52:f6:3b:b6:3e:6b:90:64:fc:7b:ae:d2:bf:aa:79:c5:24:
         8a:cf:d5:73:23:08:e4:37:cf:bc:7c:24:4d:90:8b:82:03:d4:
         1b:f1:9c:cf:f3:87:b6:cc:41:a3:1f:b8:30:0a:16:cb:59:68:
         71:7e:30:fe
-----BEGIN CERTIFICATE-----
MIIDaTCCAlGgAwIBAgIQHZFbwLjYN5oI5cGXekTQxDANBgkqhkiG9w0BAQsFADAX
MRUwEwYDVQQDDAx2cG4uYWlkYW4ubXkwHhcNMjIwNTI3MTUxMzM4WhcNMjQwODI5
MTUxMzM4WjARMQ8wDQYDVQQDDAZzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IB
DwAwggEKAoIBAQDM4thJszXN8S52KDmvb/vmUo0LfU6UTpirAqlc8iJBmZsFZWhx
9e2kxT0Cp6hPvPyZc+iLtIcLA18geTLsNyvMuup9YcSgh/BmlsEaMeu3vILwBEKq
X3/HObIJlZnXvaqMjxaBJmEMLcxlC/e+lp5EB0C9FVKfpFwbsgBFF48iliQ6kJFu
/OLN32QdchglgUzNO+m5F21FoUz3k6mjARgvwZQMXyunwUvBnZhxUg8tnR/eze1E
4SMlxUTXqWNZ7sA+gEk82rblf1vWIo3hKNXdjgeyQFRsWCtx9XNsC98klNtIeIQ/
qpoDjPb2z16BbquNfqCENyOpVbiYTQKDiKjjAgMBAAGjgbYwgbMwCQYDVR0TBAIw
ADAdBgNVHQ4EFgQUnKKQMdsuloRFDtBh8BVf20wxC8AwUgYDVR0jBEswSYAUiUfW
nbRCdx75x3w88EvlB73im6ihG6QZMBcxFTATBgNVBAMMDHZwbi5haWRhbi5teYIU
NUBTsv/x/vVLG5L1FYeYxcshebUwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0P
BAQDAgWgMBEGA1UdEQQKMAiCBnNlcnZlcjANBgkqhkiG9w0BAQsFAAOCAQEAGSY2
2kuGm0PmsMYWQ8+xUrMEXZhiWnDeipeaJd1srTTEUvZMXLE8JeSd7zk9BaNkutw/
4HB0+EzGJzS/IfD42tZNXIgY85IxCyGUNObquYb2Muel6d/R81PGe0Y8nxrojTbo
DYpJgO+Vu36bymdayid6AJ7LudhX9+ECy9z3276m1OxoFb2Db1j7OMg9vgvyapRp
+kwjLdKEsdk8itQwZeCAc7kxslWN+IpHYvzkqTllW4blNxIoEG0F9jnISYyD2MPN
pLWAl1L2O7Y+a5Bk/Huu0r+qecUkis/VcyMI5DfPvHwkTZCLggPUG/Gcz/OHtsxB
ox+4MAoWy1locX4w/g==
-----END CERTIFICATE-----
EOF9
 cat <<'EOF10'> /etc/openvpn/server.key
-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDM4thJszXN8S52
KDmvb/vmUo0LfU6UTpirAqlc8iJBmZsFZWhx9e2kxT0Cp6hPvPyZc+iLtIcLA18g
eTLsNyvMuup9YcSgh/BmlsEaMeu3vILwBEKqX3/HObIJlZnXvaqMjxaBJmEMLcxl
C/e+lp5EB0C9FVKfpFwbsgBFF48iliQ6kJFu/OLN32QdchglgUzNO+m5F21FoUz3
k6mjARgvwZQMXyunwUvBnZhxUg8tnR/eze1E4SMlxUTXqWNZ7sA+gEk82rblf1vW
Io3hKNXdjgeyQFRsWCtx9XNsC98klNtIeIQ/qpoDjPb2z16BbquNfqCENyOpVbiY
TQKDiKjjAgMBAAECggEAFr8onCYVVyPrsJqOrPeV0+BeYGQtETIYqQPGodcQDpBr
MZIsolpXY++x8lWCzjeBI9hGfRwx0fsx2H0cNjV522T1G657EgeFnR4nmizoqqF3
OAaBEEFCAnBZX88IIXehM7G/Id+M7rk29BD8FGDMeWkEuvlfDvJEd56vgPw4m/I0
aYvUI8aDb40BZ58owRVueflqRSXYgvbo936kCyMmXW33HyGGC9U3SoRvwz0q3hx2
tYGSptYQolE17Ytg6ER/4HTc0/9YOUkjRJq39c9LCpJbFJOfOsnAT5iGJXXpfZHa
rHOsA/J3Q6RsFnFpg7lm0f3dzR8HtlENRGX66bLMYQKBgQDzM4yc2oaTyqxz9dnO
AW+FwIWIuJC6T0twL0dk/zDF2p1DLGK5t8smrf8M0ifidcc9Yzo21KoVQnAB+gBH
eB77LlHAcLfUhVkPpEFbwF8cGzliqj2mGt9EdVBGP0RNR+bWYPPwfFmq99AalyFx
MxiB6m1biHmyTPkqwopHoHSIfwKBgQDXqxseHHYOD21zcJ4L7T74MAqH5VwjYeDp
pUSvQXeayqU2GK4ncJ7rPkWpDA/sbUTBnyxoCJuPEiIqR97sv2wfhfPNTk/FgJyj
P+IpPjps/fQukY5Ma+VxJJXGXgkMmkZtrAti8NPYvDuIiNzLNS7OvhCStKOEmCXS
dqYvSZ2NnQKBgBAYHDkRGRDUu77cyTIh1DCEwhF/LUy3DKX66v2bCa4+PmQAnvPt
XstLfnJpwevxoWLFm0efoTXQ9LqcwcH5CAvVT+GtU+0DehZX519cBq9EefK2k2fX
pWjRXqOXcjyvAm6zcdE7WW/AAIyR7cug9wE580y4Zl1PTLnwr9f3nV6fAoGAFVPd
dafY4OETsNPVPVaz4HVXxUKgTvtx84kddrthqZQarHPaXRodDSR2XRZNSNMxdnhY
Ot2HDKn9aPL8j6sKdT+Y8Zep+d0TIG3D3tJBkt+2Uxif2tzcrsiwaxKHkJB9IIFg
CuPH/2n19TWbqBjVTSqsluV4OjeVne+P1aNRCl0CgYA8Ni3NFX1FeHBRV2DbyLPH
cfW/yLUc96/VXlmtfJdIbPN/8U7hap9VWZulVKyA1BpLZ4kCv+zV6zufXbc1m58Y
U1dnsk4r540IVocQlVhrJAGGK7zhvV3lDVCmiK2qdkc4kMWQwPbduOhX9cckxWx/
GtcJcJGkxtrqx709ABAlhA==
-----END PRIVATE KEY-----
EOF10
 cat <<'EOF13'> /etc/openvpn/dh2048.pem
-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEAgcNF1Gx82IFyXUJhTNeMmf03W2ZF/l3QuS6zoZLqBDJqPcWhHaPu
3IoQudXqYtaF6lK2BK72cGJRD/NiURSNDkYzFVVbi9T4yjgq/8Rj3Y3neZQY5Vao
gUMOCoM6Ecap9mOE2aEB03efqgbwn8sFM1Q61qN11o5dUgYCMb320/T0urO/Qo+/
2U25Tftb01Dz4X3n5kaCDw31JmB30d9qVTkSpZNDa9J9RAY4ZIkA6QV+0oHZKw+G
JekPoozjGb6Sywep22Pv90OzbzKtdvHLw2epGU5D5QBFjvbuSg3v63+WWu414ZnL
e5/eJJFMG1COJ5CyWZQ27GqNUaICOCMD+wIBAg==
-----END DH PARAMETERS-----
EOF13

 # Getting all dns inside resolv.conf then use as Default DNS for our openvpn server
 grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read -r line; do
	echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server_tcp.conf
done

 # Creating a New update message in server.conf
 cat <<'NUovpn' > /etc/openvpn/server.conf
 # New Update are now released, OpenVPN Server
 # are now running both TCP and UDP Protocol. (Both are only running on IPv4)
 # But our native server.conf are now removed and divided
 # Into two different configs base on their Protocols:
 #  * OpenVPN TCP (located at /etc/openvpn/server_tcp.conf
 #  * OpenVPN UDP (located at /etc/openvpn/server_udp.conf
 # 
 # Also other logging files like
 # status logs and server logs
 # are moved into new different file names:
 #  * OpenVPN TCP Server logs (/etc/openvpn/tcp.log)
 #  * OpenVPN UDP Server logs (/etc/openvpn/udp.log)
 #  * OpenVPN TCP Status logs (/etc/openvpn/tcp_stats.log)
 #  * OpenVPN UDP Status logs (/etc/openvpn/udp_stats.log)
 #
 # Server ports are configured base on env vars
 # executed/raised from this script (OpenVPN_TCP_Port/OpenVPN_UDP_Port)
 #
 # Enjoy the new update
 # Script Updated by AidanVPN
NUovpn

 # setting openvpn server port
 sed -i "s|OVPNTCP|$OpenVPN_TCP_Port|g" /etc/openvpn/server_tcp.conf
 sed -i "s|OVPNUDP|$OpenVPN_UDP_Port|g" /etc/openvpn/server_udp.conf
 
 # Getting some OpenVPN plugins for unix authentication
 cd
 wget https://notabug.org/irwan-aidan/vps/raw/master/plugin.tgz
 tar -xzvf /root/plugin.tgz -C /etc/openvpn/
 rm -f plugin.tgz
 
 # Some workaround for OpenVZ machines for "Startup error" openvpn service
 if [[ "$(hostnamectl | grep -i Virtualization | awk '{print $2}' | head -n1)" == 'openvz' ]]; then
 sed -i 's|LimitNPROC|#LimitNPROC|g' /lib/systemd/system/openvpn*
 systemctl daemon-reload
fi

 # Allow IPv4 Forwarding
 sed -i '/net.ipv4.ip_forward.*/d' /etc/sysctl.conf
 sed -i '/net.ipv4.ip_forward.*/d' /etc/sysctl.d/*.conf
 echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/20-openvpn.conf
 sysctl --system &> /dev/null

 # Iptables Rule for OpenVPN server
 cat <<'EOFipt' > /etc/openvpn/openvpn.bash
#!/bin/bash
PUBLIC_INET="$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)"
IPCIDR='10.200.0.0/16'
IPCIDR2='10.201.0.0/16'
iptables -I FORWARD -s $IPCIDR -j ACCEPT
iptables -I FORWARD -s $IPCIDR2 -j ACCEPT
iptables -t nat -A POSTROUTING -o $PUBLIC_INET -j SNAT --to-source 43.225.108.168
iptables -t nat -A POSTROUTING -o venet0 -j SNAT --to-source 43.225.108.168
iptables -t nat -A POSTROUTING -s 10.200.0.0/16 -o venet0 -j SNAT --to-source 43.225.108.168
iptables -t nat -A POSTROUTING -s 10.201.0.0/16 -o venet0 -j SNAT --to-source 43.225.108.168
EOFipt
 chmod +x /etc/openvpn/openvpn.bash
 bash /etc/openvpn/openvpn.bash

 # Enabling IPv4 Forwarding
 echo 1 > /proc/sys/net/ipv4/ip_forward
 
 # Starting OpenVPN server
 systemctl start openvpn@server_tcp
 systemctl enable openvpn@server_tcp
 systemctl start openvpn@server_udp
 systemctl enable openvpn@server_udp

}
function InsProxy(){

 # Removing Duplicate privoxy config
 rm -rf /etc/privoxy/config*
 
 # Creating Privoxy server config using cat eof tricks
 cat <<'privoxy' > /etc/privoxy/config
# My Privoxy Server Config
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
logdir /var/log/privoxy
filterfile default.filter
logfile logfile
listen-address 0.0.0.0:Privoxy_Port1
listen-address 0.0.0.0:Privoxy_Port2
toggle 1
enable-remote-toggle 0
enable-remote-http-toggle 0
enable-edit-actions 0
enforce-blocks 0
buffer-limit 4096
enable-proxy-authentication-forwarding 1
forwarded-connect-retries 1
accept-intercepted-requests 1
allow-cgi-request-crunching 1
split-large-forms 0
keep-alive-timeout 5
tolerate-pipelining 1
socket-timeout 300
permit-access 0.0.0.0/0 IP-ADDRESS
privoxy

 # Setting machine's IP Address inside of our privoxy config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/privoxy/config
 
 # Setting privoxy ports
 sed -i "s|Privoxy_Port1|$Privoxy_Port1|g" /etc/privoxy/config

#install PPTP
apt-get -y install pptpd
cat > /etc/ppp/pptpd-options <<END
name pptpd
refuse-pap
refuse-chap
refuse-mschap
require-mschap-v2
require-mppe-128
ms-dns 8.8.8.8
ms-dns 8.8.4.4
proxyarp
nodefaultroute
lock
nobsdcomp
END
echo "option /etc/ppp/pptpd-options" > /etc/pptpd.conf
echo "logwtmp" >> /etc/pptpd.conf
echo "localip 10.1.0.1" >> /etc/pptpd.conf
echo "remoteip 10.1.0.5-100" >> /etc/pptpd.conf
cat >> /etc/ppp/ip-up <<END
ifconfig ppp0 mtu 1400
END
mkdir /var/lib/premium-script
/etc/init.d/pptpd restart 

 # Removing Duplicate Squid config
 rm -rf /etc/squid/squid.conf*
 
 # Creating Squid server config using cat eof tricks
 cat <<'mySquid' > /etc/squid/squid.conf
# My Squid Proxy Server Config
acl VPN dst IP-ADDRESS/32
http_access allow VPN
http_access deny all 
http_port Squid_Port1
### Allow Headers
request_header_access Allow allow all 
request_header_access Authorization allow all 
request_header_access WWW-Authenticate allow all 
request_header_access Proxy-Authorization allow all 
request_header_access Proxy-Authenticate allow all 
request_header_access Cache-Control allow all 
request_header_access Content-Encoding allow all 
request_header_access Content-Length allow all 
request_header_access Content-Type allow all 
request_header_access Date allow all 
request_header_access Expires allow all 
request_header_access Host allow all 
request_header_access If-Modified-Since allow all 
request_header_access Last-Modified allow all 
request_header_access Location allow all 
request_header_access Pragma allow all 
request_header_access Accept allow all 
request_header_access Accept-Charset allow all 
request_header_access Accept-Encoding allow all 
request_header_access Accept-Language allow all 
request_header_access Content-Language allow all 
request_header_access Mime-Version allow all 
request_header_access Retry-After allow all 
request_header_access Title allow all 
request_header_access Connection allow all 
request_header_access Proxy-Connection allow all 
request_header_access User-Agent allow all 
request_header_access Cookie allow all 
request_header_access All deny all
### HTTP Anonymizer Paranoid
reply_header_access Allow allow all 
reply_header_access Authorization allow all 
reply_header_access WWW-Authenticate allow all 
reply_header_access Proxy-Authorization allow all 
reply_header_access Proxy-Authenticate allow all 
reply_header_access Cache-Control allow all 
reply_header_access Content-Encoding allow all 
reply_header_access Content-Length allow all 
reply_header_access Content-Type allow all 
reply_header_access Date allow all 
reply_header_access Expires allow all 
reply_header_access Host allow all 
reply_header_access If-Modified-Since allow all 
reply_header_access Last-Modified allow all 
reply_header_access Location allow all 
reply_header_access Pragma allow all 
reply_header_access Accept allow all 
reply_header_access Accept-Charset allow all 
reply_header_access Accept-Encoding allow all 
reply_header_access Accept-Language allow all 
reply_header_access Content-Language allow all 
reply_header_access Mime-Version allow all 
reply_header_access Retry-After allow all 
reply_header_access Title allow all 
reply_header_access Connection allow all 
reply_header_access Proxy-Connection allow all 
reply_header_access User-Agent allow all 
reply_header_access Cookie allow all 
reply_header_access All deny all
### CoreDump
coredump_dir /var/spool/squid
dns_nameservers 8.8.8.8 8.8.4.4
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
visible_hostname AidanVPN
mySquid

 # Setting machine's IP Address inside of our Squid config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/squid/squid.conf
 
 # Setting squid ports
 sed -i "s|Squid_Port1|$Squid_Port1|g" /etc/squid/squid.conf

 # Starting Proxy server
 echo -e "Restarting proxy server..."
 systemctl restart squid
}

function OvpnConfigs(){
 # Creating nginx config for our ovpn config downloads webserver
 cat <<'myNginxC' > /etc/nginx/conf.d/AidanVPN-ovpn-config.conf
# My OpenVPN Config Download Directory
server {
 listen 0.0.0.0:myNginx;
 server_name localhost;
 root /var/www/openvpn;
 index index.html;
}
myNginxC

 # Setting our nginx config port for .ovpn download site
 sed -i "s|myNginx|$OvpnDownload_Port|g" /etc/nginx/conf.d/AidanVPN-ovpn-config.conf

 # Removing Default nginx page(port 80)
 rm -rf /etc/nginx/sites-*

 # Creating our root directory for all of our .ovpn configs
 rm -rf /var/www/openvpn
 mkdir -p /var/www/openvpn

# Now creating all of our OpenVPN Configs 
 
cat <<EOF17> /var/www/openvpn/AidanTCP.ovpn
client
dev tun
proto tcp-client
setenv FRIENDLY_NAME "AidanVPN"
remote $IPADDR $OpenVPN_TCP_Port
http-proxy $IPADDR $Squid_Port1
http-proxy-retry
remote-cert-tls server
float
mssfix 1450
redirect-gateway def1
setenv CLIENT_CERT 0
auth-user-pass
auth none
cipher none
comp-lzo
reneg-sec 0
dhcp-option DNS 1.1.1.1
dhcp-option DNS 1.0.0.1
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF17

cat <<EOF18> /var/www/openvpn/AidanMODEM.ovpn
client
dev tun
dev-type tun
remote $IPADDR $OpenVPN_TCP_Port tcp
http-proxy $IPADDR $Squid_Port1
redirect-gateway def1 bypass-dhcp
nobind
persist-tun
cipher none
auth none
verb 2
mute 3
push-peer-info
ping-restart 60
hand-window 70
server-poll-timeout 4
reneg-sec 2592000
sndbuf 100000
rcvbuf 100000
remote-cert-tls server
comp-lzo no
auth-user-pass
key-direction 1
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF18

cat <<EOF19> /var/www/openvpn/AidanROUTER.ovpn
auth-user-pass
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_TCP_Port
http-proxy $IPADDR $Squid_Port1
;http-proxy $IPADDR $Squid_Port1
persist-key
persist-tun
pull
resolv-retry infinite
nobind
comp-lzo
remote-cert-tls server
verb 3
mute 2
connect-retry 5 5
connect-retry-max 999
mute-replay-warnings
redirect-gateway def1
script-security 2
cipher none
setenv CLIENT_CERT 0
auth none
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF19

cat <<EOF20> /var/www/openvpn/AidanSTUNNEL.ovpn
auth-user-pass
client
dev tun
proto tcp
setenv FRIENDLY_NAME "AidanVPN"
remote 127.0.0.1 $OpenVPN_TCP_Port
route $IPADDR 255.255.255.255 net_gateway
nobind
persist-key
persist-tun
comp-lzo
keepalive 10 120
auth-nocache
auth none
cipher none
remote-cert-tls server
tls-client
verb 0
auth-user-pass
auth-retry interact
connect-retry 0 1
reneg-sec 0
redirect-gateway def1
dhcp-option DNS 1.1.1.1
dhcp-option DNS 1.0.0.1
log /dev/null
setenv opt block-outside-dns 
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF20

cat <<EOF21> /var/www/openvpn/AidanSSL.ovpn
auth-user-pass
client
dev tun
proto tcp
setenv FRIENDLY_NAME "AidanVPN"
remote $IPADDR $OpenVPN_TCP_Port
port $Stunnel_Port3
nobind
fast-io
persist-key
persist-tun
comp-lzo
keepalive 10 120
remote-cert-tls server
verb 0
auth-user-pass
auth-nocache
auth none
cipher none
tls-client
auth-retry interact
connect-retry 0 1
reneg-sec 0
redirect-gateway def1
dhcp-option DNS 1.1.1.1
dhcp-option DNS 1.0.0.1
log /dev/null
setenv opt block-outside-dns 
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF21
 
cat <<EOF162> /var/www/openvpn/AidanUDP.ovpn
client
dev tun
proto udp
setenv FRIENDLY_NAME "AidanVPN"
remote $IPADDR $OpenVPN_UDP_Port
remote-cert-tls server
bind
float
mssfix 1450
mute-replay-warnings
connect-retry-max 9999
redirect-gateway def1
connect-retry 0 1
resolv-retry infinite
setenv CLIENT_CERT 0
persist-tun
persist-key
auth-user-pass
auth-nocache
auth-retry interact
auth none
cipher none
comp-lzo
reneg-sec 0
verb 0
log /dev/null
dhcp-option DNS 1.1.1.1
dhcp-option DNS 1.0.0.1
setenv opt block-outside-dns 
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF162

# Creating OVPN download site index.html
cat <<'mySiteOvpn' > /var/www/openvpn/index.html
<!DOCTYPE html>
<html lang="en"

<!-- Simple OVPN Download site by AidanVPN -->

<head><meta charset="utf-8" /><title>AidanVPN OVPN Config Download</title><meta name="description" content="MyScriptName Server" /><meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" /><meta name="theme-color" content="#000000" /><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css"><link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet"><link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.3/css/mdb.min.css" rel="stylesheet"></head><body><div class="container justify-content-center" style="margin-top:9em;margin-bottom:5em;"><div class="col-md"><div class="view"><img src="https://i.ibb.co/P6LDbF3/Aidan-VPN.jpg" class="card-img-top"><div class="mask rgba-white-slight"></div></div><div class="card"><div class="card-body"><h5 class="card-title">Senarai Config</h5><br /><ul class="list-group"><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>Untuk Config TCP <span class="badge light-blue darken-4">Android/iOS</span><br /><small> Sila tekan butang Download di sebelah kanan ini</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/AidanTCP.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>Untuk Config UDP<span class="badge light-blue darken-4">Android/iOS</span><br /><small> Sila tekan butang Download di sebelah kanan ini</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/AidanUDP.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>Untuk Config MODEM<span class="badge light-blue darken-4">Huawei/BrandLain</span><br /><small> Sila tekan butang Download di sebelah kanan ini</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/AidanMODEM.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>Untuk Config ROUTER<span class="badge light-blue darken-4">Asus/BrandLain</span><br /><small> Sila tekan butang Download di sebelah kanan ini</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/AidanROUTER.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li></ul></div></div></div></div></body></html>
mySiteOvpn

 # Setting template's correct name,IP address and nginx Port
 sed -i "s|NGINXPORT|$OvpnDownload_Port|g" /var/www/openvpn/index.html
 sed -i "s|IP-ADDRESS|$IPADDR|g" /var/www/openvpn/index.html

 # Restarting nginx service
 systemctl restart nginx
 
 # Creating all .ovpn config archives
 cd /var/www/openvpn
 zip -qq -r configs.zip *.ovpn
 cd
}

function ConfStartup(){
 # Daily reboot time of our machine
 # For cron commands, visit https://crontab.guru
 echo "0 0 * * * root /usr/local/bin/reboot_sys" > /etc/cron.d/reboot_sys
 chmod +x /usr/local/bin/reboot_sys

 # Creating directory for startup script
 rm -rf /etc/AidanVPNserver
 mkdir -p /etc/AidanVPNserver
 chmod -R 755 /etc/AidanVPNserver
 
 # Creating startup script using cat eof tricks
 cat <<'EOFSH' > /etc/AidanVPNserver/startup.sh
#!/bin/bash
# Setting server local time
ln -fs /usr/share/zoneinfo/MyVPS_Time /etc/localtime

# Prevent DOS-like UI when installing using APT (Disabling APT interactive dialog)
export DEBIAN_FRONTEND=noninteractive

# Allowing ALL TCP ports for our machine (Simple workaround for policy-based VPS)
iptables -A INPUT -s $(wget -4qO- http://ipinfo.io/ip) -p tcp -m multiport --dport 1:65535 -j ACCEPT

# Allowing OpenVPN to Forward traffic
/bin/bash /etc/openvpn/openvpn.bash

# Deleting Expired SSH Accounts
/usr/local/bin/user-delete-expired &> /dev/null
exit 0
EOFSH
 chmod +x /etc/AidanVPNserver/startup.sh
 
 # Setting server local time every time this machine reboots
 sed -i "s|MyVPS_Time|$MyVPS_Time|g" /etc/AidanVPNserver/startup.sh

 # 
 rm -rf /etc/sysctl.d/99*

 # Setting our startup script to run every machine boots 
 cat <<'AidanServ' > /etc/systemd/system/AidanVPNserver.service
[Unit]
Description=AidanVPNServer Startup Script
Before=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/bash /etc/AidanVPNserver/startup.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target

AidanServ
 chmod +x /etc/systemd/system/AidanVPNserver.service
 systemctl daemon-reload
 systemctl start AidanVPNserver
 systemctl enable AidanVPNserver &> /dev/null
 systemctl enable fail2ban &> /dev/null
 systemctl start fail2ban &> /dev/null

 # Rebooting cron service
 systemctl restart cron
 systemctl enable cron
 
}
 #Create Admin
 #useradd -m admin
 #echo "admin:admin" | chpasswd

function ConfMenu(){
echo -e " Creating Menu scripts.."

cd /usr/local/bin/
wget -q 'https://notabug.org/irwan-aidan/vps/raw/master/menu.zip'
unzip -qq menu.zip
rm -f menu.zip
chmod +x ./*
dos2unix ./* &> /dev/null
#sed -i 's|http_port|listen-address|g' ./*
#sed -i 's|Squid_Port1|$Squid_Port1|g' ./*cd ~
}

function ScriptMessage(){
 echo -e " [\e[1;32m$MyScriptName VPS Installer\e[0m]"
 echo -e ""
 echo -e "(｡◕‿◕｡) Script by AidanVPN"
 echo -e ""
}

function InstBadVPN(){
 # Pull BadVPN Binary 64bit or 32bit
if [ "$(getconf LONG_BIT)" == "64" ]; then
 wget -O /usr/bin/badvpn-udpgw "https://notabug.org/irwan-aidan/vps/raw/master/badvpn-udpgw64"
else
 wget -O /usr/bin/badvpn-udpgw "https://notabug.org/irwan-aidan/vps/raw/master/badvpn-udpgw"
fi
 # Set BadVPN to Start on Boot via .profile
 sed -i '$ i\screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300' /root/.profile
 # Change Permission to make it Executable
 chmod +x /usr/bin/badvpn-udpgw
 # Start BadVPN via Screen
 screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300
}

#############################################
#############################################
########## Installation Process##############
#############################################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################################
#############################################

 # First thing to do is check if this machine is Debian
 source /etc/os-release
if [[ "$ID" != 'debian' ]]; then
 ScriptMessage
 echo -e "[\e[1;31mError\e[0m] This script is for Debian only, exiting..." 
 exit 1
fi

 # Now check if our machine is in root user, if not, this script exits
 # If you're on sudo user, run `sudo su -` first before running this script
 if [[ $EUID -ne 0 ]];then
 ScriptMessage
 echo -e "[\e[1;31mError\e[0m] This script must be run as root, exiting..."
 exit 1
fi

 # (For OpenVPN) Checking it this machine have TUN Module, this is the tunneling interface of OpenVPN server
 if [[ ! -e /dev/net/tun ]]; then
 echo -e "[\e[1;31mError\e[0m] You cant use this script without TUN Module installed/embedded in your machine, file a support ticket to your machine admin about this matter"
 echo -e "[\e[1;31m-\e[0m] Script is now exiting..."
 exit 1
fi

 # Begin Installation by Updating and Upgrading machine and then Installing all our wanted packages/services to be install.
 ScriptMessage
 sleep 2
 InstUpdates
 
 # Configure OpenSSH and Dropbear
 echo -e "Configuring ssh..."
 InstSSH
 
 # Configure Stunnel
 echo -e "Configuring stunnel..."
 InsStunnel
 
 # Configure BadVPN UDPGW
 echo -e "Configuring BadVPN UDPGW..."
 InstBadVPN
 
 # Configure Webmin
 echo -e "Configuring webmin..."
 InstWebmin
 
 # Configure Squid
 echo -e "Configuring proxy..."
 InsProxy
 
 # Configure OpenVPN
 echo -e "Configuring OpenVPN..."
 InsOpenVPN
 
 # Configuring Nginx OVPN config download site
 OvpnConfigs

 # Some assistance and startup scripts
 ConfStartup

 # VPS Menu script v1.0
 ConfMenu
 
 # Setting server local time
 ln -fs /usr/share/zoneinfo/$MyVPS_Time /etc/localtime
 
 clear
 cd ~
 
 #Install Figlet
apt-get install figlet
apt-get install cowsay fortune-mod -y
ln -s /usr/games/cowsay /bin
ln -s /usr/games/fortune /bin
echo "clear" >> .bashrc
echo 'echo -e ""' >> .bashrc
echo 'echo -e ""' >> .bashrc
echo 'cowsay -f dragon "SELAMAT DATANG BOSKU."' >> .bashrc
echo 'figlet -k AUTOSCRIPT' >> .bashrc
echo 'echo -e ""' >> .bashrc
echo 'echo -e "     ========================================================="' >> .bashrc
echo 'echo -e "     *                  WELCOME TO VPS SERVER                *"' >> .bashrc
echo 'echo -e "     ========================================================="' >> .bashrc
echo 'echo -e "     *                 Autoscript By AidanVPN               *"' >> .bashrc
echo 'echo -e "     *                   Debian 9 & Debian 10                *"' >> .bashrc
echo 'echo -e "     *                    Telegram: @irwanmohi               *"' >> .bashrc
echo 'echo -e "     ========================================================="' >> .bashrc
echo 'echo -e "     *     Taip \033[1;32mmainmenu\033[0m untuk menampilkan senarai menu      *"' >> .bashrc
echo 'echo -e "     ========================================================="' >> .bashrc
echo 'echo -e ""' >> .bashrc

 
 # Showing script's banner message
 ScriptMessage
 
 # Showing additional information from installating this script
echo " "
echo "Server sudah siap dipasang 100%. Sila baca peraturan server dan reboot VPS anda!"
echo " "  | tee -a log-install.txt
echo "--------------------------------------------------------------------------------"  | tee -a log-install.txt
echo "*                            Debian Premium Script                             *"  | tee -a log-install.txt
echo "*                                 -AidanVPN-                                  *"  | tee -a log-install.txt
echo "--------------------------------------------------------------------------------"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "---------------"  | tee -a log-install.txt
echo "Maklumat Server"  | tee -a log-install.txt
echo "---------------"  | tee -a log-install.txt
echo "   - Timezone    : Asia/Kuala_Lumpur (GMT +8)"  | tee -a log-install.txt
echo "   - Fail2Ban    : [ON]"  | tee -a log-install.txt
echo "   - IPtables    : [ON]"  | tee -a log-install.txt
echo "   - Auto-Reboot : [ON]"  | tee -a log-install.txt
echo "   - IPv6        : [OFF]"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "---------------------------"  | tee -a log-install.txt
echo "Maklumat Applikasi dan Port"  | tee -a log-install.txt
echo "---------------------------"  | tee -a log-install.txt
echo "   - OpenVPN		: TCP $OpenVPN_TCP_Port UDP $OpenVPN_UDP_Port SSL $Stunnel_Port3 "  | tee -a log-install.txt
echo "   - OpenSSH		: $SSH_Port1"  | tee -a log-install.txt
echo "   - Dropbear		: $Dropbear_Port1, $Dropbear_Port2"  | tee -a log-install.txt
echo "   - Stunnel/SSL 	: $Stunnel_Port1, $Stunnel_Port2"  | tee -a log-install.txt
echo "   - Squid Proxy	: $Squid_Port1 (limit to IP Server)"  | tee -a log-install.txt
echo "   - Privoxy		: $Privoxy_Port1 (limit to IP Server)"  | tee -a log-install.txt
echo "   - PPTPD		: 1723 (limit to IP Server)"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "----------------"  | tee -a log-install.txt
echo "Maklumat Penting"  | tee -a log-install.txt
echo "----------------"  | tee -a log-install.txt
echo "   - Installation Log    : cat /root/log-install.txt"  | tee -a log-install.txt
echo "   - Webmin              : http://$IPADDR:10000/"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "------------------------"  | tee -a log-install.txt
echo "OpenVPN Configs Download"  | tee -a log-install.txt
echo "------------------------"  | tee -a log-install.txt
echo " Download Link Web        : http://$IPADDR:$OvpnDownload_Port" | tee -a log-install.txt
echo " Download Link Direct     : http://$IPADDR:85/configs.zip"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "-----------------------"  | tee -a log-install.txt
echo "Maklumat Premium Script"  | tee -a log-install.txt
echo "-----------------------"  | tee -a log-install.txt
echo "Untuk menampilkan senarai menu,sila taip: mainmenu"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo " Copyright by (｡◕‿◕｡)AidanVPN"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "---------------------------- SILA REBOOT VPS ANDA! -----------------------------"

 # Clearing all logs from installation
rm -rf /root/.bash_history && history -c && echo '' > /var/log/syslog
rm -f install*
